// Generated by CoffeeScript 1.7.1
(function() {
  var exec, fileops, fs, log, path;

  fs = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  log = console.log;

  fileops = (function() {
    function fileops() {}

    fileops.prototype.createFile = function(filename, callback) {
      var dir, err;
      try {
        dir = path.dirname(filename);
        if (!path.existsSync(dir)) {
          log('no path exists');
          return exec("mkdir -p " + dir, (function(_this) {
            return function(error, stdout, stderr) {
              if (!error) {
                log('created path');
                return exec("touch " + filename);
              }
            };
          })(this));
        } else {
          log('path exists');
          return exec("touch " + filename, (function(_this) {
            return function(error, stdout, stderr) {
              if (error) {
                callback(error);
              }
              return callback(true);
            };
          })(this));
        }
      } catch (_error) {
        err = _error;
        log("Unable to create file " + filename);
        return callback(err);
      }
    };

    fileops.prototype.removeFile = function(filename, callback) {
      return fs.unlink(filename, function(error) {
        return callback(error);
      });
    };

    fileops.prototype.removeFileSync = function(filename) {
      var res;
      res = fs.unlinkSync(filename);
      return res;
    };

    fileops.prototype.updateFile = function(filename, content) {
      return fs.writeFileSync(filename, content);
    };

    fileops.prototype.fileExists = function(filename, callback) {
      var error;
      if (path.existsSync(filename)) {
        log('file exists');
        return callback({
          result: true
        });
      } else {
        log('File does not exist');
        error = new Error("File does not exist");
        return callback(error);
      }
    };

    fileops.prototype.fileExistsSync = function(filename) {
      if (path.existsSync(filename)) {
        return true;
      } else {
        return new Error("File does not exist");
      }
    };

    fileops.prototype.readFile = function(filename, callback) {
      return this.fileExists(filename, function(result) {
        var buf;
        if (result instanceof Error) {
          return callback(result);
        } else {
          log('reading the file');
          buf = fs.readFileSync(filename);
          return callback(buf);
        }
      });
    };

    fileops.prototype.readFileSync = function(filename) {
      var content;
      if (path.existsSync(filename)) {
        content = fs.readFileSync(filename, 'utf8');
        console.log('content is ' + content);
        return content;
      } else {
        return new Error("file " + filename + " does not exist");
      }
    };

    fileops.prototype.readdirSync = function(dirname) {
      var content;
      if (path.existsSync(dirname)) {
        content = fs.readdirSync(dirname);
        return content;
      } else {
        return new Error("Directory " + dirname + " does not exist");
      }
    };

    fileops.prototype.link = function(src, dest, force, callback) {
      var res;
      res = this.fileExistsSync(src);
      if (res instanceof Error) {
        return new Error(res);
      }
      if (force === 1) {
        console.log('forcefully overwrite the file ' + dest);
        res = this.fileExistsSync(dest);
        if (!(res instanceof Error)) {
          this.removeFileSync(dest);
        }
      }
      return fs.link(src, dest, function(res) {
        return callback(res);
      });
    };

    fileops.prototype.linkSync = function(src, dst, force) {
      var res;
      res = this.fileExistsSync(src);
      console.log(res);
      if (res instanceof Error) {
        return new Error("File does not exist!");
      }
      if (force === 1) {
        console.log('forcefully overwrite the file ' + dst);
        this.fileExistsSync(dst);
        if (!(res instanceof Error)) {
          fs.unlinkSync(dst);
        }
      }
      res = fs.linkSync(src, dst);
      return res;
    };

    return fileops;

  })();

  module.exports = new fileops;

}).call(this);
